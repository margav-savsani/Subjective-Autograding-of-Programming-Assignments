#ifndef QUICKSORT_CPP
#define QUICKSORT_CPP

#ifndef STD_HEADERS
#include "std_headers.h"
#endif

#ifndef PLANNER_H
#include "planner.h"
#endif

#ifndef DICTIONARY_H
#include "dictionary.h"
#endif

#ifndef CODES_H
#include "codes.h"
#endif

int day(TrainInfoPerStation i){//gives the day in which day of week is true
  int j=0;
  while(j<7){
    if(i.daysOfWeek[j]==true){
      return j;
    }
    j++;
  }
}
bool operator<(TrainInfoPerStation i,TrainInfoPerStation j){//overloaded operator < which compares TrainInfoPerStation by their day's of departure
  if(day(i)<day(j)){
    return true;
  }
  else if(i.depTime<j.depTime && day(i)==day(j)){
    return true;
  }
  else if(i.depTime==j.depTime && day(i)==day(j) && i.arrTime<j.arrTime) return true;
  else{
    return false;
  }
}

void exchange(TrainInfoPerStation *a,TrainInfoPerStation *b){// swaps two pointers
  TrainInfoPerStation c(1,1,1,1);
  c=*a;
  *a=*b;
  *b=c;
  return;
}
// If you are using the updated planner.cpp, then you simply need to
// sort the list of TrainInfoPerStation objects in stnInfoList.  The
// function that calls Quicksort in planner.cpp (i.e. printStationInfo)
// will then automatically pretty-print the sorted list.
//
// USING THE UPDATED planner.cpp FILE IS STRONGLY RECOMMENDED
//
// Notice that there is a variable K in Quicksort that is to be used as
// described in the problem statement in problems_statement.pdf
// Specifically, if the first call to Quicksort has an argument list of
// n TrainInfoPerStation objects, you can't use additional storage space
// for more than n/K TrainInfoPerStation objects overall (across all
// recursive calls), you must implement random choice for pivot (i.e.
// each element in the list being sorted should be equally likely to
// be chosen as pivot), and each call to finding a random pivot
// within the list being sorted must take time within O(K), regardless
// of how long the list to be sorted is.
//
// In the function signature of Quicksort, stnInfoList is a list of
// TrainInfoPerStation objects that is to be sorted. In the updated
// planner.cpp file, this list (unsorted) is already prepared for you,
// and you need to simply ensure that the list is sorted (see note
// below about sorting order) when Quicksort returns.
//
// A note about the sorting order:
//
// The final list should be sorted with respect to day of week (first)
// and departure time within the day (next).  Thus Sun 900 < Sun 1100
// < Mon 800 < Thu 700 < Fri 1200
//
//
// Based on how we saw some of you were trying to approach the problem
// in the lab of Sep 23, we are providing another function QuicksortSimple
// with a slightly extended signature. In addition to the list stnInfoList,
// which is passed as the first argument to QuicksortSimple, there are two
// integer parameters "start" and "end", just like in the usual Quicksort
// of an array (as in Prof. Naveen Garg's lectures, for example).
// How do we interpret these "start" and "end" variables in this case,
// when we are trying to sort a list?
// Well, here is one way of thinking about this: If we start
// counting elements of the list starting from stnInfoList and
// chasing "next" pointers until nullptr is reached, the corresponding
// elements can be thought of as elements of a (virtual) array indexed
// from 0 onwards.
// Then, the call to Quicksort must sort the part of the list
// consisting of elements at indices start, start+1, ... until end
// of the above virtual array.
// The whole point of this assignment is to have you do this without
// converting the whole list to an array.
//
// Remember it is indeed possible to solve this problem using the
// function Quicksort with only stnInfoList as its argument.  However,
// if you are finding it difficult to implement Quicksort, you can
// implement QuicksortSimple instead.  Those who implement both
// Quicksort and QuicksortSimple potentially stand to gain some bonus
// points.

int pivot(int start, int end)//random pivot generation
{
  srand((unsigned)time(NULL)); 
  int r = (rand()%(end-start)) + start; //numbers generated by equal probabilitiy between a and b
  return r;
}
listOfObjects<TrainInfoPerStation *> *get(listOfObjects<TrainInfoPerStation *> **arr,int pos,int k){//gives pointer to listOfObjects given position in the linked list
  int i=0;
  listOfObjects<TrainInfoPerStation *> *a=arr[pos/k];//given position in linked list returning it from our array
  while(i<pos%k){
    a=a->next;
    i++;
  }
  return a;

}
int Partition(listOfObjects<TrainInfoPerStation *> **arr, int start, int end,int k){
  listOfObjects<TrainInfoPerStation *> *poi=get(arr,pivot(start,end),k);// Partition function on TrainInfoPerStation which partitions
  TrainInfoPerStation p=*(poi->object);//pointer to pivot and its copy
  int i,j;
  i=start;
  j=end;
  while(true){
    while(p<*(get(arr,j,k)->object)){
      j=j-1;
    }
    while(*(get(arr,i,k)->object)<p){
      i=i+1;
    }
    if(i<j){
      exchange(get(arr,i,k)->object,get(arr,j,k)->object);//exchange of class objects inside array of pointers
    }
    else{
      return j;
    }
  }
}

void Planner::Quicksort(listOfObjects<TrainInfoPerStation *> *stnInfoList)
{
  // A few static variable declarations
  static int K = 4;               // Parameter to be experimented with
  static int recursionLevel = -1; // This can be used to find out at which
                                  // level of the recursion you are in

  // Increment recursion level on entering the function
  recursionLevel++;

  // If you need to set up additional storage (upto n/K TrainInfoPerStation
  // elements), it's ok to do it *once* using static variables/array.
  // Using the static recursionLevel, you can ensure that the storage
  // allocation is done only the first time Quicksort is called, and not
  // in every recursive call.
  //
  // Note that if you allocate space for upto n/K TrainInfoPerStation in
  // each recursive call, you will end up using much more than n/K space
  // overall.  So you MUST NOT allocate space in each recursive call.
  //
  // A variable/array defined using static is not created afresh in
  // each recursive call.  Instead, a single copy of it is maintained
  // across all recursions.

  if (recursionLevel == 0)
  {
    // Find length of the list stnInfoList, if needed.
    // Allocate additional space for upto n/K TrainInfoPerStation objects
    // if needed.
    // Do other things that you may want to do only at the beginning
    // as a pre-processing step.
  }

  // Put your code for the core of Quicksort here

  // Decrement recursion level before leaving the function
  recursionLevel--;
  return;
}

void Planner::QuicksortSimple(listOfObjects<TrainInfoPerStation *> *stnInfoList, int start, int end)
{
  // A few static variable declarations
  static int K = 4;               // Parameter to be experimented with
  static int recursionLevel = -1; // This can be used to find out at which
                                  // level of the recursion you are in
  static int n =1;
  listOfObjects<TrainInfoPerStation *> *s = stnInfoList;//dummy object
  while (s->next != nullptr)
  {
    s = (s->next);
    n++;//Calculation of length of given linked list
  }
  recursionLevel++;

  // Increment recursion level on entering the function

  // If you need to set up additional storage (upto n/K TrainInfoPerStation
  // elements), it's ok to do it *once* using static variables/array.
  // Using the static recursionLevel, you can ensure that the storage
  // allocation is done only the first time Quicksort is called, and not
  // in every recursive call.
  //
  // Note that if you allocate space for upto n/K TrainInfoPerStation in
  // each recursive call, you will end up using much more than n/K space
  // overall.  So you MUST NOT allocate space in each recursive call.
  //
  // A variable/array defined using static is not created afresh in
  // each recursive call.  Instead, a single copy of it is maintained
  // across all recursions.
  static listOfObjects<TrainInfoPerStation *> **arr= new listOfObjects<TrainInfoPerStation *> *[((n-1)/ K)+1];//static creation of array
  if (recursionLevel == 0)
  {
    listOfObjects<TrainInfoPerStation *> *a = stnInfoList;//dummy variable(listOfObjects<TrainInfoPerStation *> *)
    int i = 0;
    while (a!=NULL)//condition for which loop should break
    {
      if (i % K == 0)
      {
        arr[i / K] = a;//storing elements in our array of size n/K 
      }
      i++;// incrementing i
      a = a->next;//moving our dummy variable to next
    }    
    // Allocate additional space for upto n/K TrainInfoPerStation objects
    // if needed.
    // Do other things that you may want to do only at the beginning
    // as a pre-processing step.
  }
  if(start<end){
    if(pivot(start,end)!=end){//Recursive calls to Complete QuickSort
      int p=Partition(arr,start,end,K);//Calling partition
      QuicksortSimple(stnInfoList,start,p);
      QuicksortSimple(stnInfoList,p+1,end);
    }
    else{//Special case to Complete QuickSort i.e. pivot becomes last element
      int p=Partition(arr,start,end,K);
      QuicksortSimple(stnInfoList,start,p-1);
      QuicksortSimple(stnInfoList,p,end);
    }
  }

  // Put your code for the core of QuicksortSimple here

  // Decrement recursion level before leaving the function
  recursionLevel--;
  return;
}

#endif
